(()=>{"use strict";const t=document.querySelector(".slider");const e=document.getElementById("state"),n=document.getElementById("city");function o(t){n.textContent=t[0],n.style.textTransform="capitalize",e.textContent=t[1],e.style.textTransform="capitalize"}function a(t,e){const n=document.createElement("div");n.classList.add("hourly-info");const o=document.createElement("p");o.classList.add("hour"),o.textContent=function(t){let e=t.split(/:| /).join("");const n=e.slice(e.length-2);return e=e.length>7?e.slice(0,2):e.slice(0,1),e+n}(t.dt.slice(11));const a=function(t){const e=document.createElement("img");return e.classList.add("weather-icon"),e.src=`https://openweathermap.org/img/wn/${t}@2x.png`,e}(t.weather[0].icon),c=document.createElement("div");c.classList.add("temp-container");const d=document.createElement("p");d.classList.add("hourly-temp"),d.textContent=Math.round(t.main.temp);const i=document.createElement("p");return i.classList.add("hourly-degrees"),i.textContent="metric"===e?"°C":"°F",c.append(d,i),n.append(o,a,c),n}function c(t){let e=0;const n=t[0].dt.slice(0,10);return t.forEach((t=>{n===t.dt.slice(0,10)&&e++})),e}const d=document.getElementById("search"),i=document.querySelector("button");function s(){"0px"===window.getComputedStyle(d).getPropertyValue("width")?(d.setAttribute("style","width: 75%; transition: width .5s ease;"),setTimeout((()=>{i.style.display="block"}),500)):(d.removeAttribute("style","width: 75%;"),d.style.transition="width .5s ease",setTimeout((()=>{i.style.display="none"}),100))}async function l(t,e){let n=t[0],d=t[1];const i=await fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${n},%20${d}&limit=5&appid=c4404ba7cc6d37e8768e9682ed0c7259`,{mode:"cors"}),s=await i.json();console.log(s),async function(t,e,n){let d=t[0].lat,i=t[0].lon;const s=await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${d}&lon=${i}&appid=c4404ba7cc6d37e8768e9682ed0c7259&units=${e}`,{mode:"cors"}),l=await s.json();console.log(l),function(t,e,n){const o=document.getElementById("main-left"),d=t.list[0];document.getElementById("weather-condition").textContent=d.weather[0].description,document.getElementById("temperature").textContent=Math.round(d.main.temp),document.getElementById("low").textContent=e[0],document.getElementById("high").textContent=e[1],o.removeChild(o.lastChild),function(t,e){const n=document.getElementById("main-left"),o=document.createElement("div");o.classList.add("todays-card");const d=document.createElement("div");d.classList.add("hourly-container"),t.slice(0,c(t)).forEach((t=>{d.appendChild(a(t,e))})),o.appendChild(d);const i=document.createElement("div");i.classList.add("scroll-box"),i.appendChild(o),n.appendChild(i)}(t.list,n),function(t,e){!function(t,e){let n=1,o=function(t){let e=1,n=t[0].dt.slice(0,10);return t.forEach((t=>{t.dt.slice(0,10)!==n&&(e++,n=t.dt.slice(0,10))})),e}(t),d=0,i=c(t),s=i;const l=document.getElementById("main-right"),r=document.getElementById("card-wrapper");for(r.textContent="";n<=o;){let o=t.slice(d,s);const l=document.createElement("div");l.classList.add("cards",`day${n}`);const m=document.createElement("p");m.classList.add("card-day"),m.textContent=new Intl.DateTimeFormat("en-us",{weekday:"short"}).format(new Date(o[0].dt.slice(0,10)));const u=document.createElement("div");u.classList.add("hourly-container"),o.forEach((t=>{u.appendChild(a(t,e))})),l.append(m,u),r.appendChild(l),n++,d+=i,d!==t.length&&(i=c(t.slice(d))),s+=i}l.appendChild(r)}(t.slice(c(t)),e)}(t.list,n)}(l,function(t){const e=t.list,n=r(t.list[0].dt).slice(0,10);let o=Math.round(t.list[0].main.temp_min),a=Math.round(t.list[0].main.temp_max);return e.forEach((t=>{let e=r(t.dt).slice(0,10),c=Math.round(t.main.temp_min),d=Math.round(t.main.temp_max);t.dt=r(t.dt),e===n&&(c<=o&&(o=c),d>=a&&(a=d))})),[o,a]}(l),e),o(n)}(s,e,t)}function r(t){const e=new Date(1e3*t).toLocaleDateString(),n=new Date(1e3*t).toLocaleTimeString();let o="";return o=e.length<10?"0"+e:e,o+`, ${n}`}let m="imperial",u=[];const p=["Brooklyn","New York"];window.onload=t=>{l(p,m)},document.querySelector(".switch").addEventListener("click",(e=>{m=function(){getComputedStyle(document.body).getPropertyValue("--switch-rd");const e=document.querySelector(".switch"),n=document.getElementById("degrees"),o=document.getElementById("high-degrees"),a=document.getElementById("low-degrees");return"0px"===window.getComputedStyle(t).getPropertyValue("left")?(t.setAttribute("style","left: 50%; transition: all .5s ease;"),e.setAttribute("style","background: linear-gradient(225deg, #232e40, #1e2736); box-shadow:  -20px 20px 18px #1d2635, 20px -20px 18px #253043; transition: all .5s ease;"),n.textContent="°C",o.textContent="°C",a.textContent="°C","metric"):(t.setAttribute("style","left: 0; transition: all .5s ease;"),e.removeAttribute("style","background: linear-gradient(225deg, #232e40, #1e2736); box-shadow:  -20px 20px 18px #1d2635, 20px -20px 18px #253043;"),e.style.transition="all .5s ease",n.textContent="°F",o.textContent="°F",a.textContent="°F","imperial")}(),u.length>0?l(u,m):l(p,m)}));const h=document.querySelector("form");h.addEventListener("click",(t=>{if("search-icon"===t.target.id)s();else if("right-arrow"===t.target.id){t.preventDefault(),s();const e=document.getElementById("search").value,n=e.indexOf(",");u=" "===e.charAt(n+1)?e.split(", "):e.split(","),console.log(u),""===u[0]?alert("Please enter a City and State/Country, separated by a comma."):void 0===u[1]?alert("No State/Country was included. Please enter a City and State/Country, separated by a comma."):l(u,m),h.reset()}}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,